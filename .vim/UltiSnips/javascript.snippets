global !p
def cur_filename_without_extention(extention):
	return fn.replace(extention, "")
def cur_filename_for_file_to_test():
	return path.replace("Test.es", ".es").replace(".", "", 1).replace("/home/dmitry/dev/repos/colourbox", "").replace("/tests-js/unit", "")
def cur_class_variable_name():
	return fn[0].lower() + fn.replace("Test.es", "")[1:];
def cur_classname():
	return fn.replace("Test.es", "")

endglobal

snippet define "Requirejs define"
define([], () => {
    class `!p snip.rv = cur_filename_without_extention(".es")` {
        make() {
            console.log('work');
        }
    }

    return `!p snip.rv = cur_filename_without_extention(".es")`;
});
endsnippet

snippet test "Testing boilerplate"
define(['/base`!p snip.rv = cur_filename_for_file_to_test()`'], (`!p snip.rv = cur_classname()`) => {
    var `!p snip.rv = cur_class_variable_name()`;

    beforeEach(() => {
        `!p snip.rv = cur_class_variable_name()` = new `!p snip.rv = cur_classname()`();
    });

    describe('what test does', () => {
        it('should do something', () => {
            expect(true).toBe(false);
            $0
        });
    });
});
endsnippet

snippet testmock "Testing boilerplate"
define(['Squire'], (Squire) => {
    var `!p snip.rv = cur_class_variable_name()`;

    var injector;
    var `!p snip.rv = cur_class_variable_name()`Path = '/base`!p snip.rv = cur_filename_for_file_to_test()`';

    beforeEach(() => {
        injector = new Squire();
    });

    afterEach(() => {
        injector.remove();
    });

    function setUp`!p snip.rv = cur_classname()`(cb) {
        injector.mock('Stripe', {})
        .require([`!p snip.rv = cur_class_variable_name()`Path], (`!p snip.rv = cur_classname()`) => {
            `!p snip.rv = cur_class_variable_name()` = new `!p snip.rv = cur_classname()`();
            cb(`!p snip.rv = cur_class_variable_name()`);
        });
    }

    describe('what test does', () => {
        it('should do something', (done) => {
            setUp`!p snip.rv = cur_classname()`((`!p snip.rv = cur_class_variable_name()`) => {
                expect(true).toBe(false);
                done();
            });
        });
    });
});
endsnippet

snippet testjquery "Testing jquery"
define(['/base`!p snip.rv = cur_filename_for_file_to_test()`'], (`!p snip.rv = cur_classname()`) => {
    var `!p snip.rv = cur_class_variable_name()`;

    beforeEach(() => {
        `!p snip.rv = cur_class_variable_name()` = new `!p snip.rv = cur_classname()`();
    });

    jasmine.getJSONFixtures().fixturesPath = '// TODO make fixture path based on current test path + fixture folder';

    describe('what test doest', () => {
        it('should do something', () => {
            //var fixture = getJSONFixture('something');

            spyOn( jQuery, 'ajax' ).and.callFake((params) => { 
                params.success(fixture); 
            });

            `!p snip.rv = cur_class_variable_name()`.ajaxMethod().then((data) => {
                expect(JSON.stringify(data)).toBe(JSON.stringify(['something']));
            });

            done();
        });
});
endsnippet

snippet reactc "React Component"
define(['react'], (React) => {
    class `!p snip.rv = cur_filename_without_extention(".jsx")` extends React.Component {
        constructor(props) {
            super(props);
        }

        render() {
            return (
                <div>Component</div>
            )
        }
    }

    return `!p snip.rv = cur_filename_without_extention(".jsx")`;
});
endsnippet

snippet itt "it should test"
it('should ${0}', (done) => {
    done();
});
endsnippet

snippet clpp "console log with pretty print"
console.log(JSON.stringify(${1}, null, 2));
endsnippet

snippet cl
console.log(${1});
endsnippet

snippet rcc
import React from 'react';

export default class `!p snip.rv = cur_filename_without_extention(".jsx")` extends React.Component {
    constructor(props) {
		super(props);
    }

    render() {
        return (
        <div>
            Stuff
        </div>
        )
    }
}
endsnippet

snippet rcs
import React from 'react';

export default (props) => (
    <div>Stateless component</div>
);
endsnippet
