snippet define "Requirejs define"
define([], () => {
    class `!p snip.rv = fn.replace(".es", "")` {
        make() {
            console.log('work');
        }
    }

    return `!p snip.rv = fn.replace(".es", "")`;
});
endsnippet

snippet test "Testing boilerplate"
define(['/base`!p snip.rv = path.replace("Test.es", ".es").replace(".", "", 1).replace("/home/dmitry/dev/repos/colourbox", "").replace("/tests-js/unit", "")`'], (`!p snip.rv = fn.replace("Test.es", "")`) => {
    var `!p snip.rv = fn[0].lower() + fn.replace("Test.es", "")[1:]`;

    beforeEach(() => {
        `!p snip.rv = fn[0].lower() + fn.replace("Test.es", "")[1:]` = new `!p snip.rv = fn.replace("Test.es", "")`();
    });

    describe('what test does', function() {
        it('should do something', function() {
            expect(true).toBe(false);
            $0
        });
    });
});
endsnippet

snippet testmock "Testing boilerplate"
define(['Squire'], () => {
    var `!p snip.rv = fn[0].lower() + fn.replace("Test.es", "")[1:]`;

    beforeEach(() => {
    });

    var injector;
    var `!p snip.rv = fn[0].lower() + fn.replace("Test.es", "")[1:]`Path = '/base`!p snip.rv = path.replace("Test.es", ".es").replace(".", "", 1).replace("/home/dmitry/dev/repos/colourbox", "").replace("/tests-js/unit", "")`';

    beforeEach(() => {
        injector = new Squire();
    });

    afterEach(() => {
        injector.remove();
    });

    function setUpTypeDetector(cb) {
        injector.mock('Stripe', {})
        .require([`!p snip.rv = fn[0].lower() + fn.replace("Test.es", "")[1:]`Path], (`!p snip.rv = fn.replace("Test.es", "")`) => {
            `!p snip.rv = fn[0].lower() + fn.replace("Test.es", "")[1:]` = new `!p snip.rv = fn.replace("Test.es", "")`();
            cb(`!p snip.rv = fn[0].lower() + fn.replace("Test.es", "")[1:]`);
        });
    }


    describe('what test does', function() {
        it('should do something', function() {
            expect(true).toBe(false);
            $0
        });
    });
});
endsnippet
